using Toybox.WatchUi;
using Toybox.Graphics;
using Toybox.FitContributor;
using Toybox.UserProfile;

class StrideLengthView extends WatchUi.DataField {

    hidden var mValue;
           var  mSpeed;
        var mCad;
        var mDistanceBuffer;
        var mStrideLenBuffer;
        var mPointer;
        var mStrideAggragateLen;
        var noOfBuffer;
        var avgOrCurrent;
        var STRIDE_LEN_FIELD_ID;
        var HGFACTOR_LEN_FIELD_ID;
        var VGFACTOR_LEN_FIELD_ID;
        var strideLenField;
        var mDistance;
        var isPaused;
        var vgFactor;
        var vgFactorField;
        var hgFactor = new[3];
        var hgFactorField;        
        var mFontHeight;
        var xTinyHeight;
        var uWeight;
        var uHeight;
        var drawFullScreen;
        var screenCenterPoint;
        var obscurityFlags;


    function initialize() {
        DataField.initialize();
       	mFontHeight = Graphics.getFontHeight(Graphics.FONT_NUMBER_MEDIUM)-Graphics.getFontDescent(Graphics.FONT_NUMBER_MEDIUM);
        uWeight = UserProfile.getProfile().weight/1000.0;
        uHeight = UserProfile.getProfile().height;
       	xTinyHeight =0;//Graphics.getFontHeight(Graphics.FONT_XTINY)-Graphics.getFontDescent(Graphics.FONT_XTINY);
       //	mFontHeight = Graphics.getFontDescent(Graphics.FONT_NUMBER_MEDIUM);
        
       	//xTinyHeight = Graphics.getFontDescent(Graphics.FONT_XTINY); 	
        mValue = 0.0f;
        mSpeed = 0;
        mCad = 0;
        noOfBuffer = 10;
        mStrideLenBuffer = new[noOfBuffer];
        mPointer =0;
        mStrideAggragateLen = 0;
        avgOrCurrent= "STR.LEN";
        STRIDE_LEN_FIELD_ID=0;
        HGFACTOR_LEN_FIELD_ID =1;
        VGFACTOR_LEN_FIELD_ID =2;
        mDistance=0;
        isPaused = true;
        hgFactor = [0,0,0];
        vgFactor = 0;
		drawFullScreen = true; 
		obscurityFlags = null;    
		  
        // Create the custom FIT data field we want to record.
        strideLenField = createField(
            "STRIDE LENGTH",
            STRIDE_LEN_FIELD_ID,
            FitContributor.DATA_TYPE_FLOAT,
            {:mesgType=>FitContributor.MESG_TYPE_RECORD, :units=>"cm"}
        );
        hgFactorField = createField(
            "G FACTOR",
            HGFACTOR_LEN_FIELD_ID,
            FitContributor.DATA_TYPE_FLOAT,
            {:mesgType=>FitContributor.MESG_TYPE_RECORD, :units=>"g"}
        );   
       /* vgFactorField = createField(
            "G FACTOR",
            VGFACTOR_LEN_FIELD_ID,
            FitContributor.DATA_TYPE_FLOAT,
            {:mesgType=>FitContributor.MESG_TYPE_RECORD, :units=>"g"}
        );             */
		//System.println(uWeight);
        strideLenField.setData(mValue);
        hgFactorField.setData(hgFactor[0]);  
      //  vgFactorField.setData(vgFactor);       
        
    }

    function compute(info) {
    var avgOrCurrent=0;
        // See Activity.Info in the documentation for available information.

                mValue = 0.0f;
       
        if(info has :currentCadence and info has :currentSpeed){
            if(info.currentCadence  != null){
                 mCad = info.currentCadence/60.0;//rpm
               // System.println("cadence is: "+mCad/60.0);
            } 
            if(info.currentSpeed != null){
                 mSpeed = info.currentSpeed;
               // System.println("speed is: "+mSpeed);
            } 
        }
if(mCad >0 and isPaused==false)
{
        mStrideLenBuffer[mPointer] = 	mSpeed/mCad;
        mStrideAggragateLen += mSpeed/mCad;
        if(info.elapsedDistance !=null)
        {
		mDistance = info.elapsedDistance/1000.0;
			}
        
        
        	mPointer++;
        	if(mPointer>(noOfBuffer-1))
        		{
        		mPointer=0;
        		} 
        		 
        		if(mStrideLenBuffer[mPointer])
        		{
        		
        		mStrideAggragateLen =  mStrideAggragateLen-mStrideLenBuffer[mPointer] ;
        		var avgStrideLen =     mStrideAggragateLen/(noOfBuffer-1);   
        		mValue =avgStrideLen*100.0;
        		avgOrCurrent = "Stride Len (avg)";
        		} 
        		else
        			{
        			        if(mCad != null and mSpeed != null)
				        	{
				        	
				        	avgOrCurrent = "Stride Len (current)";
				        	} 
				        	mValue =mSpeed/mCad*100.0;
        			}
        			strideLenField.setData(mValue);
        		hgFactor = getAccelData(info.currentCadence,uWeight,mSpeed/mCad);
        		hgFactorField.setData(hgFactor[0]); //[Gcount,hMax,mPower];


}        		
       			
    }

    function onUpdate(dc) {
 			obscurityFlags = DataField.getObscurityFlags(); 
 
	        		if(drawFullScreen ==true)
        			{
        		  //System.println("imma drawin Fulscreen (onUpdate)" +obscurityFlags); 
        			View.findDrawableById("Background").setColor(getBackgroundColor());
        			drawFullScreenDataField(dc,hgFactor,mValue,uHeight);
        			}
        			else{
				        			
		View.findDrawableById("Background").setColor(getBackgroundColor());
			  		 
				        // Set the foreground color and value
				        var value = View.findDrawableById("value");
				        if (getBackgroundColor() == Graphics.COLOR_BLACK) {
				            value.setColor(Graphics.COLOR_WHITE);
				        } else {
				            value.setColor(Graphics.COLOR_BLACK);
				        }
				        value.setText(mValue.format("%i"));
				
				        // Call parent's onUpdate(dc) to redraw the layout
				        if(View.findDrawableById("label"))
				        	{
				        	View.findDrawableById("label").setText(avgOrCurrent);
				        	}  
        	 View.onUpdate(dc);
        	}
       
         	
    }
  function onTimerPause () {
  isPaused = true;
  }
  function onTimerStopped () {
  isPaused = true;
  }
  function onTimerResume () {
   isPaused = false;
  }
  function onTimerStart () {
   isPaused = false;
  }
  
  function getAccelData(Cadence,weight,StrideLen) {
  var gCons = 9.81;
  var Gcount = 0;
  var vGcount =0;
  var hMax = 0;
  var mPower = 0;
   var Vv = 0;
  if(StrideLen==0 or StrideLen ==null or Cadence ==null)
  	{
    Gcount = 1;
    vGcount =1;
  	}
  	else
  	{
 var sMoveTime= (1/(Cadence/60.0))*0.5; //body moving up time. land time is the same for simplicity
 
 var Vo = sMoveTime*gCons;
 hMax =  (Vo*Vo)/(2*gCons);
 mPower = Math.floor(weight*gCons*hMax/sMoveTime);
 var doublealpha = 2*Math.atan(hMax/(StrideLen/2.0));
 if(doublealpha!=0)
 {Vv = Math.sqrt(StrideLen*gCons/(Math.sin(doublealpha)));}
   Gcount = (Vv/(sMoveTime/2.0))/gCons;
  // vGcount = (Vo/(sMoveTime/2.0))/gCons;

 }
	hMax = (hMax*100).toNumber();
	mPower = mPower.toNumber();
//	System.println("Gcount is: "+Gcount) ;
    return [Gcount,hMax,mPower];
}
     
function onLayout(dc) {

			
		screenCenterPoint = [dc.getWidth()/2, dc.getHeight()/2];

 		
            View.setLayout(Rez.Layouts.MainLayout(dc));
			drawFullScreen = false;
        if ( obscurityFlags ==  OBSCURE_TOP | OBSCURE_LEFT | OBSCURE_BOTTOM | OBSCURE_RIGHT)) {
        
			drawFullScreen = true;
			View.setLayout(Rez.Layouts.FullScreenLayout(dc));
        // Top right quadrant so we'll use the top right layout
        }
       
        // Top left quadrant so we'll use the top left layout
         else if (obscurityFlags == (OBSCURE_TOP | OBSCURE_LEFT)) {
            View.setLayout(Rez.Layouts.TopLeftLayout(dc));
            drawFullScreen = false;

        // Top right quadrant so we'll use the top right layout
        } else if (obscurityFlags == (OBSCURE_TOP | OBSCURE_RIGHT)) {
            View.setLayout(Rez.Layouts.TopRightLayout(dc));
            drawFullScreen = false;

        // Bottom left quadrant so we'll use the bottom left layout
        } else if (obscurityFlags == (OBSCURE_BOTTOM | OBSCURE_LEFT)) {
            View.setLayout(Rez.Layouts.BottomLeftLayout(dc));
            drawFullScreen = false;

        // Bottom right quadrant so we'll use the bottom right layout
        } else if (obscurityFlags == (OBSCURE_BOTTOM | OBSCURE_RIGHT)) {
            View.setLayout(Rez.Layouts.BottomRightLayout(dc));
            drawFullScreen = false;
			
        // Use the generic, centered layout
        } else if (obscurityFlags == (OBSCURE_RIGHT)) {
            View.setLayout(Rez.Layouts.RightLayout(dc));
            drawFullScreen = false;
			
        // Use the generic, centered layout
        } else if (obscurityFlags == (OBSCURE_LEFT)) {
            View.setLayout(Rez.Layouts.LeftLayout(dc));
			drawFullScreen = false;
        // Use the generic, centered layout
        }                
        
         else {
            //View.setLayout(Rez.Layouts.MainLayout(dc));
			//drawFullScreen = false;
        }

         View.findDrawableById("label").setText(avgOrCurrent);  
          //System.println("dc height is :"+dc.getHeight());
          if(mFontHeight+xTinyHeight>dc.getHeight())
          	{
          	//System.println("Font Sum is is :"+(mFontHeight+xTinyHeight)+" and is greater than dc :"+dc.getHeight());
          	 View.setLayout(Rez.Layouts.MiniLayout(dc));
          	}
          	else
          		{
          	//	System.println("Font Sum is ok :"+(mFontHeight+xTinyHeight)+"dc is "+dc.getHeight());
          		}
         
          
        return true;
       
    } 
function drawFullScreenDataField(dc,dynamics,StrideLen,userHeight) {
//draw Layout
dc.setColor(Graphics.COLOR_WHITE, Graphics.COLOR_BLACK);
dc.clear();
 //System.println("gFactor is is:"+dynamics+" g");
var sWidth = dc.getWidth();
var sHeight = dc.getHeight();
dc.setColor(Graphics.COLOR_WHITE, Graphics.COLOR_TRANSPARENT);
dc.clear();
//layout
dc.setPenWidth(1);
dc.drawLine(0, sHeight/2, sWidth, sHeight/2);
dc.drawLine(sWidth/2, sHeight/2, sWidth/2, sHeight);
//colors

dc.setColor(Graphics.COLOR_WHITE, Graphics.COLOR_TRANSPARENT);
//fields
//Stride len quality will be divided by user height. This will be base for performance indicator

drawHalfField(dc,StrideLen,userHeight);

/********rest of fields************/
dc.setColor(Graphics.COLOR_DK_GRAY, Graphics.COLOR_TRANSPARENT);
dc.drawText(sWidth/2, sHeight/2, Graphics.FONT_TINY , "G Factor ",Graphics.TEXT_JUSTIFY_RIGHT);
dc.drawText(sWidth/2, sHeight/2, Graphics.FONT_TINY , " Power",Graphics.TEXT_JUSTIFY_LEFT);


dc.setColor(Graphics.COLOR_WHITE, Graphics.COLOR_TRANSPARENT);
dc.drawText(sWidth/2, sHeight*0.75, Graphics.FONT_NUMBER_MEDIUM , dynamics[0].format("%.1f")+" ",Graphics.TEXT_JUSTIFY_RIGHT|Graphics.TEXT_JUSTIFY_VCENTER);
dc.drawText(sWidth/2, sHeight*0.75, Graphics.FONT_NUMBER_MEDIUM , " "+dynamics[2].format("%i"),Graphics.TEXT_JUSTIFY_LEFT|Graphics.TEXT_JUSTIFY_VCENTER);


} 



function generateStrideThicks(centerPoint, angle, handLength,thinPen) {

        var ThickLen = 12;
        var yMax = centerPoint[1]-thinPen-5;
        var cP = centerPoint;
        angle = angle+Math.PI/2;

        var coords1 = [[-5,-yMax+ThickLen],[0,-yMax]];
        var coords2 = [[0,-yMax],[5,-yMax+ThickLen]];
        var coords3 = [[5,-yMax+ThickLen],[-5,-yMax+ThickLen]];
        
        var cos = Math.cos(angle);
        var sin = Math.sin(angle);
        var ret = new[2];
        var result1 = [[cP[0]+  coords1[0][1]*cos+coords1[0][0]*sin,	cP[1]+coords1[0][1]*sin-coords1[0][0]*cos ]     ,  
        		 [cP[0]+coords1[1][1]*cos+coords1[1][0]*sin,	cP[1]+coords1[1][1]*sin-coords1[1][0]*cos]];
        var result2 = [[cP[0]+  coords2[0][1]*cos+coords2[0][0]*sin,	cP[1]+coords2[0][1]*sin-coords2[0][0]*cos ]     ,  
        		 [cP[0]+coords2[1][1]*cos+coords2[1][0]*sin,	cP[1]+coords2[1][1]*sin-coords2[1][0]*cos]]; 
        var result3 = [[cP[0]+  coords3[0][1]*cos+coords3[0][0]*sin,	cP[1]+coords3[0][1]*sin-coords3[0][0]*cos ]     ,  
        		 [cP[0]+coords3[1][1]*cos+coords3[1][0]*sin,	cP[1]+coords3[1][1]*sin-coords3[1][0]*cos]];         		    	


        		 var total =    
        		[[cP[0]+  coords1[0][1]*cos+coords1[0][0]*sin,	cP[1]+coords1[0][1]*sin-coords1[0][0]*cos ],  
        		 [cP[0]+coords1[1][1]*cos+coords1[1][0]*sin,	cP[1]+coords1[1][1]*sin-coords1[1][0]*cos],

				 [cP[0]+  coords2[0][1]*cos+coords2[0][0]*sin,	cP[1]+coords2[0][1]*sin-coords2[0][0]*cos ],  
        		 [cP[0]+coords2[1][1]*cos+coords2[1][0]*sin,	cP[1]+coords2[1][1]*sin-coords2[1][0]*cos],
        		 
        		 [cP[0]+  coords3[0][1]*cos+coords3[0][0]*sin,	cP[1]+coords3[0][1]*sin-coords3[0][0]*cos ],  
				 [cP[0]+coords3[1][1]*cos+coords3[1][0]*sin,	cP[1]+coords3[1][1]*sin-coords3[1][0]*cos]];
        return [result1,result3,result2,total];
    }
function DrawPolygon(DrawContext,polygon) {
		for(var i=1;i<polygon.size();i++)
			{
			DrawContext.drawLine(polygon[i-1][0], polygon[i-1][1], polygon[i][0], polygon[i][1]);
			}
}


function drawHalfField(dc,StrideLen,userHeight) {
var strQuality = StrideLen/userHeight;
var sWidth = dc.getWidth();
var sHeight = dc.getHeight();
if(strQuality>0.99)
{
strQuality=0.99;
}
dc.setColor(Graphics.COLOR_DK_GRAY, Graphics.COLOR_TRANSPARENT);
dc.drawText(sWidth/2, sHeight/7, Graphics.FONT_TINY , "Stride [cm]",Graphics.TEXT_JUSTIFY_CENTER);

//draw arcs
dc.setPenWidth(5);
var stridePalette = [Graphics.COLOR_RED, 
						Graphics.COLOR_ORANGE,
						Graphics.COLOR_YELLOW,
						Graphics.COLOR_GREEN,
						Graphics.COLOR_BLUE,
						Graphics.COLOR_PURPLE];
		
		dc.setColor(Graphics.COLOR_RED, Graphics.COLOR_BLACK);
var i=0;
var thatArc = Math.floor(strQuality/0.1667).toNumber(); //because there is 6 colors onscale
var thinPen = sWidth/20;
var thickPen = thinPen*2;

for(var ang = 180;ang>0;ang -=30)
	{
	dc.setPenWidth(thinPen);
	if(i==thatArc)
		{
	dc.setPenWidth(thickPen);	
		}
	dc.setColor(stridePalette[i], Graphics.COLOR_TRANSPARENT);
	dc.drawArc(screenCenterPoint[0], screenCenterPoint[1], screenCenterPoint[0]-5, Graphics.ARC_CLOCKWISE , ang, ang-30);
	i++;
	}		
		
/******************/	

var strQualityAngle = strQuality*Math.PI-Math.PI/2.0;
var thick = generateStrideThicks(screenCenterPoint,strQualityAngle,5,thinPen);
		dc.setColor(Graphics.COLOR_WHITE, Graphics.COLOR_TRANSPARENT);
 
		dc.setColor(Graphics.COLOR_WHITE, Graphics.COLOR_TRANSPARENT);
		dc.fillPolygon(thick[3]);
			
		dc.setColor(Graphics.COLOR_WHITE, Graphics.COLOR_TRANSPARENT);
//draw the stride length txt	


	dc.setColor(Graphics.COLOR_WHITE, Graphics.COLOR_TRANSPARENT);
dc.drawText(sWidth/2, sHeight/2-1.1*Graphics.getFontAscent(Graphics.FONT_NUMBER_HOT), Graphics.FONT_NUMBER_HOT, StrideLen.format("%i"),Graphics.TEXT_JUSTIFY_CENTER );

}     
}
