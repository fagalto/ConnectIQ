
class textRenderer {
var _dc;
public var fgColor;
public var bgColor;

function initialize (dc) {
_dc = dc;

}

	function renderText(x,y,size,value)
	{
		var spacing = 0;//size/20;
		//System.println("gotta:"+value);
		var tempPolygons = new[value.length()];
		var valPolygons = new[value.length()];
		var wMod=1;	//for wide letters like m and w
		var digit = null;
		var pMaxX = null;
		
		spacing = size/20;
		if(spacing<2)
			{
			spacing = 3;
			}	
			for(var i=0;i<value.length();i++)
			{
			digit = value.substring(i,i+1).toString();
			var tempPolygons1 = calcDigit(size,digit);
			 
			

				//System.println("wMod="+wMod);
			tempPolygons =	PolyTranslate(tempPolygons1,x+i*spacing,y);
			pMaxX = polyMaxX(tempPolygons1);
			x+=pMaxX;
			valPolygons[i] = tempPolygons;
				if(digit.find("m") !=null or digit.find("w") !=null) {
				//
				wMod=2.0;
				}			
			 else
			 	{wMod=1.0;}
			}
			for(var i=0;i<value.length();i++)
			{
			_dc.setColor(fgColor, bgColor);
			_dc.fillPolygon(valPolygons[i]);
			}		
		
		}

		function calcDigit(s,digit)	{
		var tdv = 6.0;
		if(s<30)
			{
			tdv=6.0;
			}
		var mUp = tdv/2.0+0.5;
		var mDn = tdv/2.0-0.5;
		if(s<20 and s.toNumber()%2==0)
			{
		  mUp = tdv/2.0+1;
		  mDn = tdv/2.0-0;			
			}
				
 	

		//System.println("gotta:"+mUp+","+mDn);
		var hs = s/2;
		var th = Math.floor(s/tdv);

		  mUp = mUp*th;
		  mDn = mDn*th;	
		 
		//if(th<2){th=2;}
		//System.println("gotta:"+th+","+mUp);
		var xspacing = s/10;
		var polygon = null;
		
		var letter = new[2];
		
			switch ( digit ) {
			case "1":
					polygon = [[hs, 0], [hs, -s],[hs-1.5*th,-s],[hs-1.5*th,-s+th],[hs-th,-s+th],[hs-th,0]];break;
			case "2":
					polygon = [[hs, 0], [hs, 0-1*th],[0+th,0-1*th],[0+th,0-mDn],[hs,0-mDn],[hs,-s],[0,-s],[0,-s+th],[hs-th,-s+th],[hs-th,0-mUp],[0,0-mUp],[0,0]];break;
			case "3":
					polygon = [[hs, 0], [hs, -s],[0,-s],[0,-s+th],[hs-th,-s+th],[hs-th,0-mUp],[0+2,0-mUp],[0+2,0-mDn],[hs-th,0-mDn],[hs-th,0-1*th],[0,0-1*th],[0,0]];break;
			case "4":
					polygon = [[hs, 0], [hs,-s+1.5*th],[hs-th,-s+1.5*th],[hs-th,0-mUp],[0+th,0-mUp],[0+th,-s],[0,-s],[0,0-mDn],[hs-th,0-mDn],[hs-th,0]];break;
			case "5":
					polygon = [[hs, 0], [hs, 0-mUp],[0+th,0-mUp],[0+th,-s+th],[hs,-s+th],[hs,-s],[0,-s],[0,0-mDn],[hs-th,0-mDn],[hs-th,0-1*th],[0,0-1*th],[0,0]];break;
			case "6":
					polygon = [[hs, 0], [hs, 0-mUp],[0+th,0-mUp],[0+th,-s+th],[hs,-s+th],[hs,-s],[0,-s],[0,0],[0+th,0],[0+th,0-mDn],[hs-th,0-mDn],[hs-th,0-1*th],[0+th,0-1*th],[0+th,0]];break;
			case "7":
					polygon = [[hs, 0], [hs, -s],[0,-s],[0,-s+th],[hs-th,-s+th],[hs-th,0]]; break;
			case "8":
					polygon = [[hs, 0], [hs, -s],[hs-th,-s],[hs-th,0-mUp],[0+th,0-mUp],[0+th,-s+th],[hs-th,-s+th],[hs-th,-s],[0,-s],[0,0],  [0+th,0],[0+th,0-mDn],[hs-th,0-mDn],[hs-th,0-1*th],[0+th,0-1*th],[0+th,0]];break;
			case "9":
					polygon = [[hs, 0],[hs,-s],[hs-th,-s],[hs-th,0-mUp],[0+th,0-mUp],[0+th,-s+th],[hs-th,-s+th],[hs-th,-s],[0,-s],[0,0-mDn],[hs-th,0-mDn],[hs-th,0-1*th],[0,0-1*th],[0,0]];break;	
			case "0":
					polygon = [[hs, 0], [hs, -s],[hs-th,-s],[hs-th,0-1*th],[0+th,0-1*th],[0+th,-s+th],[hs-th,-s+th],[hs-th,-s],[0,-s],[0,0]]; break;	
			case "-":
					polygon = [[0, 0-mUp], [hs, 0-mUp],[hs, 0-mDn],[0, 0-mDn]]; break;		
			case "|":
					polygon = [[hs, 0], [hs, -s],[0,-s],[0,0]]; break;
			case ".":
					polygon = [[hs/2-th/2, 0], [hs/2+th/2, 0],[hs/2+th/2, 0-th], [hs/2-th/2, 0-th]]; break;					
			case "a":
					polygon = [[hs, 0], [hs, -s],[0,-s],[0,0],[th,0],[th,-s+th],[hs-th,-s+th],[hs-th,0-mDn],[th,0-mDn],[th,0-mUp],[hs-th,0-mUp],[hs-th,0]];break;	
			case "b":
					polygon = [[hs, 0],[hs,0-mUp],[th,0-mUp],[th,-s],[0,-s],  [0,0],[hs-th,0],[hs-th,0-th],[th,0-th],[th,0-mDn],[hs-th,0-mDn],[hs-th,0]];break;
			case "c":
					polygon = [[hs, 0], [hs, 0-th],[th,0-th],[th,0-mDn],[hs,0-mDn],[hs,0-mUp],[0,0-mUp],[0,0]];break;		
			case "d":
					polygon = [[hs, 0], [hs, -s],[hs-th,-s],[hs-th,0-mUp],[0,0-mUp],[0,0],[hs-th,0],[hs-th,0-th],[th,0-th],[th,0-mDn],[hs-th,0-mDn],[hs-th,0]];break;
			case "e":
					polygon = [[hs, 0], [hs, 0-th],[th,0-th],[th,0-2*th],[hs,0-2*th],[hs,-s+th],[0,-s+th],[0,-s+2*th],[hs-th,-s+2*th],[hs-th,0-3*th],[th,0-3*th],[th,-s+2*th],[0,-s+2*th],[0,0]];break;
			case "f":
					polygon = [[hs-th, 0],[hs-th,0-mDn],[hs,0-mDn],[hs,0-mUp],[hs-th,0-mUp],[hs-th,-s+th],[hs,-s+th],[hs,-s],[hs-2*th,-s],[hs-2*th,0-mUp],[hs-3*th,0-mUp],[hs-3*th,0-mDn],[hs-2*th,0-mDn],[hs-2*th,0]];break;
			case "g":
					polygon = [[0,-s+2*th],[hs,-s+2*th],[hs,0+th],[0,0+th],[0,0],[hs-th,0],[hs-th,0-th],[0,0-th],[0,0-2*th],[hs-th,0-2*th],[hs-th,-s+3*th],[th,-s+3*th],[th,0-2*th],[0,0-2*th]];break;
			case "h":
					polygon = [[hs, 0],[hs,-s+2*th],[th,-s+2*th],[th,-s+th],[0,-s+th],  [0,0],[th,0],[th,-s+3*th],[hs-th,-s+3*th],[hs-th,0]];break;
			case "i":
					polygon = [[2*th,0],[3*th,0],[3*th,-s+th],[1.5*th,-s+th],[1.5*th,-s+2*th],[2*th,-s+2*th],[2*th,0]];break;		
			case "j"://todo
					polygon = [[2*th,0],[3*th,0],[3*th,-s+th],[1.5*th,-s+th],[1.5*th,-s+2*th],[2*th,-s+2*th],[2*th,0]];break;
			case "k"://todo
					polygon = [[2*th,0],[3*th,0],[3*th,-s+th],[1.5*th,-s+th],[1.5*th,-s+2*th],[2*th,-s+2*th],[2*th,0]];break;
			case "l"://todo
					polygon = [[2*th,0],[3*th,0],[3*th,-s+th],[1.5*th,-s+th],[1.5*th,-s+2*th],[2*th,-s+2*th],[2*th,0]];break;	
			case "m"://todo
					polygon = [[0,0],[0,-s],[s,-s],[s,0],[s-th,0], [s-th,-s+th],[s/2+th/2,-s+th],[s/2+th/2,0],[s/2-th/2,0],[s/2-th/2,-s+th],[th,-s+th],[th,0],[0,0]];break;																								
									
			}
			
		//polygon = [[hs+100, 0+100], [hs+100, -s+100],[hs-2*th+100,-s+100],[hs-2*th+100,-s+th+100],[hs-th+100,-s+th+100],[hs-th+100,0+100]];
	
		return polygon;
	
	
}

function polyMaxX (Polygon)
	{
	var maxX = 0;
		if(Polygon !=null)
		{
		var s = Polygon.size();
		
		
		for( var j = 0; j < Polygon.size(); j++ ) {
				   //System.println("imma translatin"+Polygon[j]);
				    if(Polygon[j][0]>maxX)
				    	{
				    	maxX = Polygon[j][0];
				    	System.println("maxX is"+maxX+", form "+Polygon);
				    	}
				}
		}
	return maxX;	
	}
function PolyTranslate(Polygon,Tx,Ty)
	{
	if(Polygon !=null)
	{
	var s = Polygon.size();
	var tempShifter = new [s];
	
	for( var j = 0; j < Polygon.size(); j++ ) {
			  // System.println("imma translatin"+Polygon[j]+[Tx,Ty]);
			    Polygon[j] =  [Polygon[j][0]+Tx,Polygon[j][1]+Ty];
			}
	}
	return Polygon;	
	}


}