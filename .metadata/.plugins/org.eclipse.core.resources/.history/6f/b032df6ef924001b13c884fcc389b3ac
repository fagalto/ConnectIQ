using Toybox.WatchUi;
using Toybox.Graphics;
using Toybox.FitContributor;
using Toybox.UserProfile;

class StrideLengthView extends WatchUi.DataField {

    hidden var mValue;
           var  mSpeed;
        var mCad;
        var mDistanceBuffer;
        var mStrideLenBuffer;
        var mPointer;
        var mStrideAggragateLen;
        var noOfBuffer;
        var avgOrCurrent;
        var STRIDE_LEN_FIELD_ID;
        var HGFACTOR_LEN_FIELD_ID;
        var VGFACTOR_LEN_FIELD_ID;
        var strideLenField;
        var mDistance;
        var isPaused;
        var vgFactor;
        var vgFactorField;
        var hgFactor = new[3];
        var hgFactorField;        
        var mFontHeight;
        var xTinyHeight;
        var uWeight;
        var uHeight;
        var drawFullScreen;


    function initialize() {
        DataField.initialize();
       	mFontHeight = Graphics.getFontHeight(Graphics.FONT_NUMBER_MEDIUM)-Graphics.getFontDescent(Graphics.FONT_NUMBER_MEDIUM);
        uWeight = UserProfile.getProfile().weight/1000.0;
        uHeight = UserProfile.getProfile().height;
       	xTinyHeight =0;//Graphics.getFontHeight(Graphics.FONT_XTINY)-Graphics.getFontDescent(Graphics.FONT_XTINY);
       //	mFontHeight = Graphics.getFontDescent(Graphics.FONT_NUMBER_MEDIUM);
        
       	//xTinyHeight = Graphics.getFontDescent(Graphics.FONT_XTINY); 	
        mValue = 0.0f;
        mSpeed = 0;
        mCad = 0;
        noOfBuffer = 10;
        mStrideLenBuffer = new[noOfBuffer];
        mPointer =0;
        mStrideAggragateLen = 0;
        avgOrCurrent= "STR.LEN";
        STRIDE_LEN_FIELD_ID=0;
        HGFACTOR_LEN_FIELD_ID =1;
        VGFACTOR_LEN_FIELD_ID =2;
        mDistance=0;
        isPaused = true;
        hgFactor = [0,0,0];
        vgFactor = 0;
		drawFullScreen = false;        
        // Create the custom FIT data field we want to record.
        strideLenField = createField(
            "STRIDE LENGTH",
            STRIDE_LEN_FIELD_ID,
            FitContributor.DATA_TYPE_FLOAT,
            {:mesgType=>FitContributor.MESG_TYPE_RECORD, :units=>"cm"}
        );
        hgFactorField = createField(
            "G FACTOR",
            HGFACTOR_LEN_FIELD_ID,
            FitContributor.DATA_TYPE_FLOAT,
            {:mesgType=>FitContributor.MESG_TYPE_RECORD, :units=>"g"}
        );   
       /* vgFactorField = createField(
            "G FACTOR",
            VGFACTOR_LEN_FIELD_ID,
            FitContributor.DATA_TYPE_FLOAT,
            {:mesgType=>FitContributor.MESG_TYPE_RECORD, :units=>"g"}
        );             */
		//System.println(uWeight);
        strideLenField.setData(mValue);
        hgFactorField.setData(hgFactor[0]);  
      //  vgFactorField.setData(vgFactor);       
        
    }

    function compute(info) {
    var avgOrCurrent=0;
        // See Activity.Info in the documentation for available information.

                mValue = 0.0f;
       
        if(info has :currentCadence and info has :currentSpeed){
            if(info.currentCadence  != null){
                 mCad = info.currentCadence/60.0;//rpm
               // System.println("cadence is: "+mCad/60.0);
            } 
            if(info.currentSpeed != null){
                 mSpeed = info.currentSpeed;
               // System.println("speed is: "+mSpeed);
            } 
        }
if(mCad >0 and isPaused==false)
{
        mStrideLenBuffer[mPointer] = 	mSpeed/mCad;
        mStrideAggragateLen += mSpeed/mCad;
        if(info.elapsedDistance !=null)
        {
		mDistance = info.elapsedDistance/1000.0;
			}
       var mPower = 	info.currentPower;
        
        	mPointer++;
        	if(mPointer>(noOfBuffer-1))
        		{
        		mPointer=0;
        		} 
        		 
        		if(mStrideLenBuffer[mPointer])
        		{
        		
        		mStrideAggragateLen =  mStrideAggragateLen-mStrideLenBuffer[mPointer] ;
        		var avgStrideLen =     mStrideAggragateLen/(noOfBuffer-1);   
        		mValue =Math.floor(avgStrideLen*100).toNumber();
        		avgOrCurrent = "Stride Len (avg)";
        		} 
        		else
        			{
        			        if(mCad != null and mSpeed != null)
				        	{
				        	
				        	avgOrCurrent = "Stride Len (current)";
				        	} 
				        	mValue =Math.floor(mSpeed/mCad*100).toNumber();
        			}
        			strideLenField.setData(mValue);
        		hgFactor = getAccelData(info.currentCadence,uWeight,mSpeed/mCad);
        		hgFactorField.setData(hgFactor[0]); //[Gcount,hMax,mPower];


}        		
       			
    }

    function onUpdate(dc) {
 
	        		if(drawFullScreen ==true)
        			{
        			View.findDrawableById("Background").setColor(getBackgroundColor());
        			drawFullScreenDataField(dc,hgFactor,mValue);
        			}
        			else{
				        			
		View.findDrawableById("Background").setColor(getBackgroundColor());
			  		 
				        // Set the foreground color and value
				        var value = View.findDrawableById("value");
				        if (getBackgroundColor() == Graphics.COLOR_BLACK) {
				            value.setColor(Graphics.COLOR_WHITE);
				        } else {
				            value.setColor(Graphics.COLOR_BLACK);
				        }
				        value.setText(mValue.format("%i"));
				
				        // Call parent's onUpdate(dc) to redraw the layout
				        if(View.findDrawableById("label"))
				        	{
				        	View.findDrawableById("label").setText(avgOrCurrent);
				        	}  
        	 View.onUpdate(dc);
        	}
       
         	
    }
  function onTimerPause () {
  isPaused = true;
  }
  function onTimerStopped () {
  isPaused = true;
  }
  function onTimerResume () {
   isPaused = false;
  }
  function onTimerStart () {
   isPaused = false;
  }
  
  function getAccelData(Cadence,weight,StrideLen) {
  var gCons = 9.81;
  var Gcount = 0;
  var vGcount =0;
  var hMax = 0;
  var mPower = 0;
   var Vv = 0;
  if(StrideLen==0 or StrideLen ==null or Cadence ==null)
  	{
    Gcount = 1;
    vGcount =1;
  	}
  	else
  	{
 var sMoveTime= (1/(Cadence/60.0))*0.5; //body moving up time. land time is the same for simplicity
 
 var Vo = sMoveTime*gCons;
 hMax =  (Vo*Vo)/(2*gCons);
 mPower = Math.floor(weight*gCons*hMax/sMoveTime);
 var doublealpha = 2*Math.atan(hMax/(StrideLen/2.0));
 if(doublealpha!=0)
 {Vv = Math.sqrt(StrideLen*gCons/(Math.sin(doublealpha)));}
   Gcount = (Vv/(sMoveTime/2.0))/gCons;
  // vGcount = (Vo/(sMoveTime/2.0))/gCons;

 }
	hMax = (hMax*100).toNumber();
	mPower = mPower.toNumber();
//	System.println("Gcount is: "+Gcount) ;
    return [Gcount,hMax,mPower];
}
     
function onLayout(dc) {
        var obscurityFlags = DataField.getObscurityFlags();
        drawFullScreen = false;
        if (obscurityFlags == (OBSCURE_TOP | OBSCURE_LEFT | OBSCURE_BOTTOM | OBSCURE_RIGHT)) {
           System.println("imma drawin Fulscreen");
			drawFullScreen = true;
			View.setLayout(Rez.Layouts.FullScreenLayout(dc));
        // Top right quadrant so we'll use the top right layout
        }
        // Top left quadrant so we'll use the top left layout
         else if (obscurityFlags == (OBSCURE_TOP | OBSCURE_LEFT)) {
            View.setLayout(Rez.Layouts.TopLeftLayout(dc));

        // Top right quadrant so we'll use the top right layout
        } else if (obscurityFlags == (OBSCURE_TOP | OBSCURE_RIGHT)) {
            View.setLayout(Rez.Layouts.TopRightLayout(dc));

        // Bottom left quadrant so we'll use the bottom left layout
        } else if (obscurityFlags == (OBSCURE_BOTTOM | OBSCURE_LEFT)) {
            View.setLayout(Rez.Layouts.BottomLeftLayout(dc));

        // Bottom right quadrant so we'll use the bottom right layout
        } else if (obscurityFlags == (OBSCURE_BOTTOM | OBSCURE_RIGHT)) {
            View.setLayout(Rez.Layouts.BottomRightLayout(dc));
			
        // Use the generic, centered layout
        } else if (obscurityFlags == (OBSCURE_RIGHT)) {
            View.setLayout(Rez.Layouts.RightLayout(dc));
			
        // Use the generic, centered layout
        } else if (obscurityFlags == (OBSCURE_LEFT)) {
            View.setLayout(Rez.Layouts.LeftLayout(dc));
			
        // Use the generic, centered layout
        }                
        
         else {
            View.setLayout(Rez.Layouts.MainLayout(dc));
          /*  var labelView = View.findDrawableById("label");
            labelView.locY = labelView.locY - 16;
            var valueView = View.findDrawableById("value");
            valueView.locY = valueView.locY + 7;*/
        }

         View.findDrawableById("label").setText(avgOrCurrent);  
          //System.println("dc height is :"+dc.getHeight());
          if(mFontHeight+xTinyHeight>dc.getHeight())
          	{
          	//System.println("Font Sum is is :"+(mFontHeight+xTinyHeight)+" and is greater than dc :"+dc.getHeight());
          	 View.setLayout(Rez.Layouts.MiniLayout(dc));
          	}
          	else
          		{
          	//	System.println("Font Sum is ok :"+(mFontHeight+xTinyHeight)+"dc is "+dc.getHeight());
          		}
          
        return true;
       
    } 
function drawFullScreenDataField(dc,dynamics,StrideLen) {
//draw Layout
dc.clear();
 //System.println("gFactor is is:"+dynamics+" g");
var sWidth = dc.getWidth();
var sHeight = dc.getHeight();
dc.setColor(Graphics.COLOR_ORANGE, Graphics.COLOR_BLACK);
dc.clear();

dc.drawLine(0, sHeight/2, sWidth, sHeight/2);
dc.drawLine(sWidth/2, sHeight/2, sWidth/2, sHeight);
dc.setColor(Graphics.COLOR_WHITE, Graphics.COLOR_BLACK);

dc.drawText(sWidth/2, sHeight/4, Graphics.FONT_NUMBER_HOT, StrideLen,Graphics.TEXT_JUSTIFY_CENTER);
dc.drawText(sWidth/4, sHeight*0.75, Graphics.FONT_NUMBER_HOT, dynamics[0],Graphics.TEXT_JUSTIFY_CENTER);
dc.drawText(sWidth*0.75, sHeight*0.75, Graphics.FONT_NUMBER_HOT, dynamics[2],Graphics.TEXT_JUSTIFY_CENTER);


}    
}
